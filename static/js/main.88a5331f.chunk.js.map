{"version":3,"sources":["serviceWorker.js","components/common/navigation/links.jsx","components/common/toolbar/toolbar-with-navigation.jsx","components/dashboard/dashboard-index.jsx","components/common/routes.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Links","react_default","a","createElement","className","this","props","classes","drawer","index_es","Link","to","navLink","Home_default","primary","MoneyOff_default","InsertDriveFile_default","ListAlt_default","Settings_default","Component","withStyles","width","textDecoration","ToolbarWithNavigation","state","isOpen","toggleDrawer","_this","setState","root","SwipeableDrawer_default","open","onClose","onOpen","disableBackdropTransition","tabIndex","role","onClick","onKeyDown","links","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","color","aria-label","Menu_default","Typography_default","variant","grow","title","buttons","map","item","index","key","flexGrow","paddingTop","marginLeft","marginRight","DashboardIndex","Fragment","toolbar_with_navigation","Routes","Switch","Route","path","component","history","matchMedia","matches","createHashHistory","createBrowserHistory","ReactDOM","render","Router","basename","process","routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88a5331f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from 'prop-types';\r\nimport { List, ListItem, ListItemIcon, ListItemText, Divider } from '@material-ui/core';\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport MoneyOffIcon from \"@material-ui/icons/MoneyOff\";\r\nimport ListAlt from \"@material-ui/icons/ListAlt\";\r\nimport Settings from \"@material-ui/icons/Settings\";\r\nimport File from \"@material-ui/icons/InsertDriveFile\";\r\n\r\nconst styles = {\r\n  drawer: {\r\n    width: 250\r\n  },\r\n  navLink: {\r\n    textDecoration: 'none'\r\n  }\r\n}\r\n\r\nclass Links extends Component {\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes.drawer}>\r\n        <List>\r\n          <Link to='/' className={this.props.classes.navLink}>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <HomeIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashboard\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to='/expense' className={this.props.classes.navLink}>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <MoneyOffIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Expense\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to='/expensetemplates' className={this.props.classes.navLink}>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <File />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Expense templates\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Link to='/budget' className={this.props.classes.navLink}>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <ListAlt />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Budget\" />\r\n            </ListItem>\r\n          </Link>\r\n          <Divider />\r\n          <Link to='/settings' className={this.props.classes.navLink}>\r\n            <ListItem>\r\n              <ListItemIcon>\r\n                <Settings />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Settings\" />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLinks.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(Links);","import React, {Component} from 'react';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Links from \"../navigation/links\";\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingTop: 56\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n};\r\n\r\nclass ToolbarWithNavigation extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  toggleDrawer = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <div className={this.props.classes.root}>\r\n        <SwipeableDrawer\r\n          open={this.state.isOpen}\r\n          onClose={this.toggleDrawer}\r\n          onOpen={this.toggleDrawer}\r\n          disableBackdropTransition={true}>\r\n              <div\r\n                tabIndex={0}\r\n                role=\"button\"\r\n                onClick={this.toggleDrawer}\r\n                onKeyDown={this.toggleDrawer}>\r\n                  <Links />\r\n              </div>\r\n        </SwipeableDrawer>\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar>\r\n            <IconButton onClick={this.toggleDrawer} className={this.props.classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" color=\"inherit\" className={this.props.classes.grow}>\r\n                {this.props.title}\r\n            </Typography>\r\n            {this.props.buttons.map((item, index) => <span color=\"inherit\" key={index}>{item}</span>)}\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nToolbarWithNavigation.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ToolbarWithNavigation);","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from 'prop-types';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ToolbarWithNavigation from \"../common/toolbar/toolbar-with-navigation\";\r\n\r\nconst styles = {\r\n    \r\n}\r\n\r\nclass DashboardIndex extends Component {\r\n    render () {\r\n        return (\r\n            <>\r\n                <ToolbarWithNavigation buttons={[]} title=\"Dashboard\" />\r\n                <Typography>dashboard index</Typography>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nDashboardIndex.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(DashboardIndex);","import React, { Component } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport DashboardIndex from \"../dashboard/dashboard-index\";\r\n\r\nclass Routes extends Component {\r\n    render() {\r\n      return (\r\n        <Switch>\r\n            <Route path='/' component={DashboardIndex}/>\r\n        </Switch>\r\n      );\r\n    }\r\n}\r\n  \r\n\r\nexport default Routes\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Routes from \"./components/common/routes\";\nimport 'typeface-roboto';\nimport { createBrowserHistory, createHashHistory } from 'history';\nimport { Router } from 'react-router-dom';\n\nconst configureHistory = () => {\n    return window.matchMedia('(display-mode: standalone)').matches\n        ? createHashHistory()\n        : createBrowserHistory()\n}\nconst history = configureHistory();\n\nReactDOM.render((\n    <Router history={history} basename={process.env.PUBLIC_URL}>\n        <Routes />\n    </Router>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}